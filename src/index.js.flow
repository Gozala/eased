/* @flow */

import type {Color, Float} from "value-color"

export type {Color, Float}
export type Time = number

// Type alias for Easing functions.
export type Easing =
  (x:Float) =>
  Float

// An interpolation of two values using a Float value.
export type Interpolation <a> =
  (from:a, to:a, value:Float) =>
  a

// An `Animation` is a function that returns a value given a duration and the current time.
export type Animation <a> =
  (duration:Time, time:Time) =>
  a

declare export function ease <a>
  ( easing:Easing
  , interpolation:Interpolation<a>
  , from:a
  , to:a
  , duration:Time
  , progress:Time
  ):
  a

declare export function float
  ( from:Float
  , to:Float
  , progress:Float
  ):
  Float

export type Point2D =
  { x: Float
  , y:Float
  }

declare export function point2D
  ( from:Point2D
  , to:Point2D
  , progress:Float
  ):
  Point2D

export type Point3D =
  { x: Float
  , y:Float
  , z:Float
  }

declare export function point3D
  ( from:Point3D
  , to:Point3D
  , progress:Float
  ):
  Point3D


declare export function color
  ( from:Color
  , to:Color
  , progress:Float
  ):
  Color


declare export function pair <a>
  (interpolate:Interpolation<a>):
  Interpolation<[a, a]>

// Inverts an `Easing` function. A transition that starts fast and continues
// slow now starts slow and continues fast.
declare export function invert
  (easing:Easing):
  Easing

// Flips an `Easing` function. A transition that looks like `/`, now looks like
// `\`.
declare export function flip
  (easing:Easing):
  Easing

// Makes an Easing function using two `Easing` functions. The first half the
// first `Easing` function is used, the other half the second.
declare export function inOut
  ( begin:Easing
  , end:Easing
  ):
  Easing

// Makes an `Easing` function go to the end first and then back to the start.
// A transition that looks like `/` now looks like `/\`.
declare export function retour
  (easing:Easing):
  Easing

// Repeats an `Animation` infinitely
// const rotate = cycle(ease(linear, float, 0, 360), second)
declare export function cycle <a>
  (animation:Animation<a>):
  Animation<a>

declare export var linear:Easing
declare export var easeInQuad:Easing
declare export var easeOutQuad:Easing
declare export var easeInOutQuad:Easing
declare export var easeInCubic:Easing
declare export var easeOutCubic:Easing
declare export var easeInOutCubic:Easing
declare export var easeInQuart:Easing
declare export var easeOutQuart:Easing
declare export var easeInOutQuart:Easing
declare export var easeInQuint:Easing
declare export var easeOutQuint:Easing
declare export var easeInOutQuint:Easing
declare export var easeOutSine:Easing
declare export var easeInSine:Easing
declare export var easeInOutSine:Easing
declare export var easeInExpo:Easing
declare export var easeOutExpo:Easing
declare export var easeInOutExpo:Easing
declare export var easeOutCirc:Easing
declare export var easeInCirc:Easing
declare export var easeInOutCirc:Easing
declare export var easeInBack:Easing
declare export var easeOutBack:Easing
declare export var easeInOutBack:Easing
declare export var easeOutBounce:Easing
declare export var easeInBounce:Easing
declare export var easeInOutBounce:Easing
declare export var easeInElastic:Easing
declare export var easeOutElastic:Easing
declare export var easeInOutElastic:Easing

declare export function floats
  ( from:[Float, Float]
  , to:[Float, Float]
  , progress:Float
  ):[Float, Float]

declare export function bezier
  ( x1:Float
  , y1:Float
  , x2:Float
  , y2:Float
  ):Easing
